{"ast":null,"code":"var _jsxFileName = \"/Users/sdillikar/mydesktop/github/projects/go_playground/interceptors/grpc-interceptor/grpcexample/ui/pingpongapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { PingPongClient } from './proto/service_grpc_web_pb';\nimport { PingRequest } from './proto/service_pb'; // We create a client that connects to the api\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar client = new PingPongClient(\"http://localhost:8090\");\n\nfunction App() {\n  _s();\n\n  // Create a const named status and a function called setStatus\n  const [status, setStatus] = useState(false); // create a const named pingCount \n\n  const [pingCounter, setPingCounter] = useState(0); // serverPings is a counter for how many ping the server has\n\n  const [serverPings, setServerPings] = useState(0); // sendPing is a function that will send a ping to the backend\n\n  const sendPing = () => {\n    var pingRequest = new PingRequest(); // use the client to send our pingrequest, the function that is passed\n    // as the third param is a callback. \n\n    var metadata; // I store the request since we want to listen on metadata exchanges\n\n    var request = client.ping(pingRequest, metadata, function (err, response) {\n      // serialize the response to an object \n      var pong = response.toObject(); // set our JS clients ping counter to +1\n\n      setPingCounter(prevPingCounter => prevPingCounter + 1); // call setStatus to change the value of status\n\n      setStatus(pong.ok);\n    }); // lets bind a function to change the counter based on the metadata field\n\n    request.on('metadata', function (status) {\n      // pingCounts are stored in Metadata, and metadata is a key value map\n      setServerPings(status['ping-counts']);\n    });\n  };\n\n  useEffect(() => {\n    // Start a interval each 3 seconds which calls sendPing. \n    const interval = setInterval(() => sendPing(), 3000);\n    return () => {\n      // reset timer\n      clearInterval(interval);\n    };\n  }, [status]); // we will return the HTML. Since status is a bool\n  // we need to + '' to convert it into a string\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status: \", status + '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 35\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Requests: This client has performed \", pingCounter, \" out of \", serverPings]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"LQ2Ktju1Az98pWUJTnNA66ANjC4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sdillikar/mydesktop/github/projects/go_playground/interceptors/grpc-interceptor/grpcexample/ui/pingpongapp/src/App.js"],"names":["React","useState","useEffect","PingPongClient","PingRequest","client","App","status","setStatus","pingCounter","setPingCounter","serverPings","setServerPings","sendPing","pingRequest","metadata","request","ping","err","response","pong","toObject","prevPingCounter","ok","on","interval","setInterval","clearInterval"],"mappings":";;;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,WAAT,QAA4B,oBAA5B,C,CAIC;;;AACD,IAAIC,MAAM,GAAG,IAAIF,cAAJ,CAAmB,uBAAnB,CAAb;;AAEA,SAASG,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,KAAD,CAApC,CAFa,CAGb;;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA9C,CAJa,CAKb;;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,CAAD,CAA9C,CANa,CAOb;;AACA,QAAMY,QAAQ,GAAG,MAAM;AACrB,QAAIC,WAAW,GAAG,IAAIV,WAAJ,EAAlB,CADqB,CAErB;AACA;;AACA,QAAIW,QAAJ,CAJqB,CAKrB;;AACA,QAAIC,OAAO,GAAGX,MAAM,CAACY,IAAP,CAAYH,WAAZ,EAAyBC,QAAzB,EAAmC,UAASG,GAAT,EAAcC,QAAd,EAAwB;AACvE;AACA,UAAIC,IAAI,GAAGD,QAAQ,CAACE,QAAT,EAAX,CAFuE,CAGvE;;AACAX,MAAAA,cAAc,CAACY,eAAe,IAAIA,eAAe,GAAE,CAArC,CAAd,CAJuE,CAKvE;;AACAd,MAAAA,SAAS,CAACY,IAAI,CAACG,EAAN,CAAT;AACD,KAPa,CAAd,CANqB,CAcrB;;AACAP,IAAAA,OAAO,CAACQ,EAAR,CAAW,UAAX,EAAuB,UAASjB,MAAT,EAAiB;AACtC;AACAK,MAAAA,cAAc,CAACL,MAAM,CAAC,aAAD,CAAP,CAAd;AACD,KAHD;AAID,GAnBD;;AAqBAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMuB,QAAQ,GAAGC,WAAW,CAAC,MAAMb,QAAQ,EAAf,EAAmB,IAAnB,CAA5B;AACA,WAAO,MAAM;AACX;AACAc,MAAAA,aAAa,CAACF,QAAD,CAAb;AACD,KAHD;AAID,GAPQ,EAOP,CAAClB,MAAD,CAPO,CAAT,CA7Ba,CAsCb;AACA;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,6BAAYA,MAAM,GAAG,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAC8B;AAAA;AAAA;AAAA;AAAA,YAD9B,eAEE;AAAA,yDAAwCE,WAAxC,cAA6DE,WAA7D;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAhDQL,G;;KAAAA,G;AAkDT,eAAeA,GAAf","sourcesContent":["\nimport './App.css';\nimport React, {useState, useEffect } from 'react';\nimport { PingPongClient } from './proto/service_grpc_web_pb';\nimport { PingRequest } from './proto/service_pb';\n\n\n\n // We create a client that connects to the api\nvar client = new PingPongClient(\"http://localhost:8090\");\n\nfunction App() {\n  // Create a const named status and a function called setStatus\n  const [status, setStatus] = useState(false);\n  // create a const named pingCount \n  const [pingCounter, setPingCounter] = useState(0); \n  // serverPings is a counter for how many ping the server has\n  const [serverPings, setServerPings] = useState(0); \n  // sendPing is a function that will send a ping to the backend\n  const sendPing = () => {\n    var pingRequest = new PingRequest();\n    // use the client to send our pingrequest, the function that is passed\n    // as the third param is a callback. \n    var metadata;\n    // I store the request since we want to listen on metadata exchanges\n    var request = client.ping(pingRequest, metadata, function(err, response) {\n      // serialize the response to an object \n      var pong = response.toObject();\n      // set our JS clients ping counter to +1\n      setPingCounter(prevPingCounter => prevPingCounter +1);\n      // call setStatus to change the value of status\n      setStatus(pong.ok);\n    });\n    // lets bind a function to change the counter based on the metadata field\n    request.on('metadata', function(status) {\n      // pingCounts are stored in Metadata, and metadata is a key value map\n      setServerPings(status['ping-counts']);\n    })\n  }\n\n  useEffect(() => {\n    // Start a interval each 3 seconds which calls sendPing. \n    const interval = setInterval(() => sendPing(), 3000)\n    return () => {\n      // reset timer\n      clearInterval(interval);\n    }\n  },[status]);\n  \n  // we will return the HTML. Since status is a bool\n  // we need to + '' to convert it into a string\n  return (\n    <div className=\"App\">\n      <p>Status: {status + ''}</p><br/>\n      <p>Requests: This client has performed {pingCounter} out of {serverPings}</p>\n    </div>\n  );\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
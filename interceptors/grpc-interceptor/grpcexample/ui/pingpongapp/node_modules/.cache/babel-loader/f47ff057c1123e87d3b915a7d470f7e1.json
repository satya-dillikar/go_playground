{"ast":null,"code":"import _slicedToArray from\"/Users/sdillikar/mydesktop/github/projects/go_playground/interceptors/grpc-interceptor/grpcexample/ui/pingpongapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'./App.css';import React,{useState,useEffect}from'react';import{PingPongClient}from'./proto/service_grpc_web_pb';import{PingRequest}from'./proto/service_pb';// We create a client that connects to the api\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var client=new PingPongClient(\"http://localhost:8090\");function App(){// Create a const named status and a function called setStatus\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),status=_useState2[0],setStatus=_useState2[1];// create a const named pingCount \nvar _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),pingCounter=_useState4[0],setPingCounter=_useState4[1];// serverPings is a counter for how many ping the server has\nvar _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),serverPings=_useState6[0],setServerPings=_useState6[1];// sendPing is a function that will send a ping to the backend\nvar sendPing=function sendPing(){var pingRequest=new PingRequest();// use the client to send our pingrequest, the function that is passed\n// as the third param is a callback. \nvar metadata;// I store the request since we want to listen on metadata exchanges\nvar request=client.ping(pingRequest,metadata,function(err,response){// serialize the response to an object \nvar pong=response.toObject();// set our JS clients ping counter to +1\nsetPingCounter(function(prevPingCounter){return prevPingCounter+1;});// call setStatus to change the value of status\nsetStatus(pong.ok);});// lets bind a function to change the counter based on the metadata field\nrequest.on('metadata',function(status){// pingCounts are stored in Metadata, and metadata is a key value map\nsetServerPings(status['ping-counts']);});};useEffect(function(){// Start a interval each 3 seconds which calls sendPing. \nvar interval=setInterval(function(){return sendPing();},3000);return function(){// reset timer\nclearInterval(interval);};},[status]);// we will return the HTML. Since status is a bool\n// we need to + '' to convert it into a string\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Status: \",status+'']}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Requests: This client has performed \",pingCounter,\" out of \",serverPings]})]});}export default App;","map":{"version":3,"sources":["/Users/sdillikar/mydesktop/github/projects/go_playground/interceptors/grpc-interceptor/grpcexample/ui/pingpongapp/src/App.js"],"names":["React","useState","useEffect","PingPongClient","PingRequest","client","App","status","setStatus","pingCounter","setPingCounter","serverPings","setServerPings","sendPing","pingRequest","metadata","request","ping","err","response","pong","toObject","prevPingCounter","ok","on","interval","setInterval","clearInterval"],"mappings":"wOACA,MAAO,WAAP,CACA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAA0C,OAA1C,CACA,OAASC,cAAT,KAA+B,6BAA/B,CACA,OAASC,WAAT,KAA4B,oBAA5B,CAIC;wFACD,GAAIC,CAAAA,MAAM,CAAG,GAAIF,CAAAA,cAAJ,CAAmB,uBAAnB,CAAb,CAEA,QAASG,CAAAA,GAAT,EAAe,CACb;AACA,cAA4BL,QAAQ,CAAC,KAAD,CAApC,wCAAOM,MAAP,eAAeC,SAAf,eACA;AACA,eAAsCP,QAAQ,CAAC,CAAD,CAA9C,yCAAOQ,WAAP,eAAoBC,cAApB,eACA;AACA,eAAsCT,QAAQ,CAAC,CAAD,CAA9C,yCAAOU,WAAP,eAAoBC,cAApB,eACA;AACA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,GAAIC,CAAAA,WAAW,CAAG,GAAIV,CAAAA,WAAJ,EAAlB,CACA;AACA;AACA,GAAIW,CAAAA,QAAJ,CACA;AACA,GAAIC,CAAAA,OAAO,CAAGX,MAAM,CAACY,IAAP,CAAYH,WAAZ,CAAyBC,QAAzB,CAAmC,SAASG,GAAT,CAAcC,QAAd,CAAwB,CACvE;AACA,GAAIC,CAAAA,IAAI,CAAGD,QAAQ,CAACE,QAAT,EAAX,CACA;AACAX,cAAc,CAAC,SAAAY,eAAe,QAAIA,CAAAA,eAAe,CAAE,CAArB,EAAhB,CAAd,CACA;AACAd,SAAS,CAACY,IAAI,CAACG,EAAN,CAAT,CACD,CAPa,CAAd,CAQA;AACAP,OAAO,CAACQ,EAAR,CAAW,UAAX,CAAuB,SAASjB,MAAT,CAAiB,CACtC;AACAK,cAAc,CAACL,MAAM,CAAC,aAAD,CAAP,CAAd,CACD,CAHD,EAID,CAnBD,CAqBAL,SAAS,CAAC,UAAM,CACd;AACA,GAAMuB,CAAAA,QAAQ,CAAGC,WAAW,CAAC,iBAAMb,CAAAA,QAAQ,EAAd,EAAD,CAAmB,IAAnB,CAA5B,CACA,MAAO,WAAM,CACX;AACAc,aAAa,CAACF,QAAD,CAAb,CACD,CAHD,CAID,CAPQ,CAOP,CAAClB,MAAD,CAPO,CAAT,CASA;AACA;AACA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,gCAAYA,MAAM,CAAG,EAArB,GADF,cAC8B,aAD9B,cAEE,4DAAwCE,WAAxC,YAA6DE,WAA7D,GAFF,GADF,CAQD,CAED,cAAeL,CAAAA,GAAf","sourcesContent":["\nimport './App.css';\nimport React, {useState, useEffect } from 'react';\nimport { PingPongClient } from './proto/service_grpc_web_pb';\nimport { PingRequest } from './proto/service_pb';\n\n\n\n // We create a client that connects to the api\nvar client = new PingPongClient(\"http://localhost:8090\");\n\nfunction App() {\n  // Create a const named status and a function called setStatus\n  const [status, setStatus] = useState(false);\n  // create a const named pingCount \n  const [pingCounter, setPingCounter] = useState(0); \n  // serverPings is a counter for how many ping the server has\n  const [serverPings, setServerPings] = useState(0); \n  // sendPing is a function that will send a ping to the backend\n  const sendPing = () => {\n    var pingRequest = new PingRequest();\n    // use the client to send our pingrequest, the function that is passed\n    // as the third param is a callback. \n    var metadata;\n    // I store the request since we want to listen on metadata exchanges\n    var request = client.ping(pingRequest, metadata, function(err, response) {\n      // serialize the response to an object \n      var pong = response.toObject();\n      // set our JS clients ping counter to +1\n      setPingCounter(prevPingCounter => prevPingCounter +1);\n      // call setStatus to change the value of status\n      setStatus(pong.ok);\n    });\n    // lets bind a function to change the counter based on the metadata field\n    request.on('metadata', function(status) {\n      // pingCounts are stored in Metadata, and metadata is a key value map\n      setServerPings(status['ping-counts']);\n    })\n  }\n\n  useEffect(() => {\n    // Start a interval each 3 seconds which calls sendPing. \n    const interval = setInterval(() => sendPing(), 3000)\n    return () => {\n      // reset timer\n      clearInterval(interval);\n    }\n  },[status]);\n  \n  // we will return the HTML. Since status is a bool\n  // we need to + '' to convert it into a string\n  return (\n    <div className=\"App\">\n      <p>Status: {status + ''}</p><br/>\n      <p>Requests: This client has performed {pingCounter} out of {serverPings}</p>\n    </div>\n  );\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}